//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated by a tool.
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ReSharper disable All
using System.Collections.Generic;
using Commands;
using GameSmithyState;
using UI.UiCanvases;
using UniDi;
using UnityEngine;

namespace UI.UiStates
{
public partial class UiStateProvider
{
	private readonly Dictionary<UiStateType, IState> states = new();
    private readonly DiContainer container;

	[Inject]
    public UiStateProvider(DiContainer container) {
        this.container = container;
        Debug.Log("UiStateProvider created");
        CreateStates();
    }

	private void CreateStates() 
	{
		var LoadingGameUiState = new LoadingGameUiState();
	container.Inject(LoadingGameUiState);
	states.Add(UiStateType.LoadingGameUiState, LoadingGameUiState);
		var LobbyUiState = new LobbyUiState();
	container.Inject(LobbyUiState);
	states.Add(UiStateType.LobbyUiState, LobbyUiState);
		var SettingsUiState = new SettingsUiState();
	container.Inject(SettingsUiState);
	states.Add(UiStateType.SettingsUiState, SettingsUiState);
		var LoadingMatchUiState = new LoadingMatchUiState();
	container.Inject(LoadingMatchUiState);
	states.Add(UiStateType.LoadingMatchUiState, LoadingMatchUiState);
		var MatchUiState = new MatchUiState();
	container.Inject(MatchUiState);
	states.Add(UiStateType.MatchUiState, MatchUiState);
		var LoadingMetaUiState = new LoadingMetaUiState();
	container.Inject(LoadingMetaUiState);
	states.Add(UiStateType.LoadingMetaUiState, LoadingMetaUiState);
		var ShopUiState = new ShopUiState();
	container.Inject(ShopUiState);
	states.Add(UiStateType.ShopUiState, ShopUiState);
		}
}

public enum UiStateType 
{
	None,
	LoadingGameUiState,
	LobbyUiState,
	SettingsUiState,
	LoadingMatchUiState,
	MatchUiState,
	LoadingMetaUiState,
	ShopUiState,
}

public partial class LoadingGameUiState : BaseUiState
{
 	private CanvasProvider canvasProvider;
 	private ChangeUiStateCommand.Factory commandFactory;

	private BackgroundUiCanvas BackgroundUiCanvas => canvasProvider.GetCanvas(CanvasType.BackgroundUiCanvas) as BackgroundUiCanvas;
	private BackgroundUiCanvasIntent BackgroundUiCanvasIntent = new();
	private LoadingUiCanvas LoadingUiCanvas => canvasProvider.GetCanvas(CanvasType.LoadingUiCanvas) as LoadingUiCanvas;
	private LoadingUiCanvasIntent LoadingUiCanvasIntent = new();

	protected override HashSet<string> AllowedPaths => new() {
		"LobbyUiState",
	
};

	protected override void OnEnter() 
	{
        base.OnEnter();

        Subscribe();
        PrepareData();
		OnShow();
        SetIntent();
        ShowCanvases();
    }

    protected override void OnExit() {
        base.OnExit();

        UnSubscribe();
		OnHide();
        HideCanvases();
    }

	private void SetIntent() 
	{
		BackgroundUiCanvas.SetData(BackgroundUiCanvasIntent);
		LoadingUiCanvas.SetData(LoadingUiCanvasIntent);
    }

	private void ShowCanvases() 
	{
		BackgroundUiCanvas.Show();
		LoadingUiCanvas.Show();
	}

	private void HideCanvases() 
	{
		BackgroundUiCanvas.Hide();
		LoadingUiCanvas.Hide();
	}

	private void MoveToLobbyUiState() {
	    var cmd = commandFactory.Create(UiStateType.LoadingGameUiState, UiStateType.LobbyUiState);
	    cmd.ExecuteAsync();
	}
	


	[Inject]
    public void Inject(ChangeUiStateCommand.Factory factory,CanvasProvider provider) 
	{
        commandFactory = factory;
		canvasProvider = provider;
    }
} 
public partial class LobbyUiState : BaseUiState
{
 	private CanvasProvider canvasProvider;
 	private ChangeUiStateCommand.Factory commandFactory;

	private TopUiCanvas TopUiCanvas => canvasProvider.GetCanvas(CanvasType.TopUiCanvas) as TopUiCanvas;
	private TopUiCanvasIntent TopUiCanvasIntent = new();
	private LobbyUiCanvas LobbyUiCanvas => canvasProvider.GetCanvas(CanvasType.LobbyUiCanvas) as LobbyUiCanvas;
	private LobbyUiCanvasIntent LobbyUiCanvasIntent = new();
	private BottomUiCanvas BottomUiCanvas => canvasProvider.GetCanvas(CanvasType.BottomUiCanvas) as BottomUiCanvas;
	private BottomUiCanvasIntent BottomUiCanvasIntent = new();

	protected override HashSet<string> AllowedPaths => new() {
		"LoadingMatchUiState",
		"SettingsUiState",
		"ShopUiState",
	
};

	protected override void OnEnter() 
	{
        base.OnEnter();

        Subscribe();
        PrepareData();
		OnShow();
        SetIntent();
        ShowCanvases();
    }

    protected override void OnExit() {
        base.OnExit();

        UnSubscribe();
		OnHide();
        HideCanvases();
    }

	private void SetIntent() 
	{
		TopUiCanvas.SetData(TopUiCanvasIntent);
		LobbyUiCanvas.SetData(LobbyUiCanvasIntent);
		BottomUiCanvas.SetData(BottomUiCanvasIntent);
    }

	private void ShowCanvases() 
	{
		TopUiCanvas.Show();
		LobbyUiCanvas.Show();
		BottomUiCanvas.Show();
	}

	private void HideCanvases() 
	{
		TopUiCanvas.Hide();
		LobbyUiCanvas.Hide();
		BottomUiCanvas.Hide();
	}

	private void MoveToLoadingMatchUiState() {
	    var cmd = commandFactory.Create(UiStateType.LobbyUiState, UiStateType.LoadingMatchUiState);
	    cmd.ExecuteAsync();
	}
	private void MoveToSettingsUiState() {
	    var cmd = commandFactory.Create(UiStateType.LobbyUiState, UiStateType.SettingsUiState);
	    cmd.ExecuteAsync();
	}
	private void MoveToShopUiState() {
	    var cmd = commandFactory.Create(UiStateType.LobbyUiState, UiStateType.ShopUiState);
	    cmd.ExecuteAsync();
	}
	


	[Inject]
    public void Inject(ChangeUiStateCommand.Factory factory,CanvasProvider provider) 
	{
        commandFactory = factory;
		canvasProvider = provider;
    }
} 
public partial class SettingsUiState : BaseUiState
{
 	private CanvasProvider canvasProvider;
 	private ChangeUiStateCommand.Factory commandFactory;

	private TopUiCanvas TopUiCanvas => canvasProvider.GetCanvas(CanvasType.TopUiCanvas) as TopUiCanvas;
	private TopUiCanvasIntent TopUiCanvasIntent = new();
	private SettingsUiCanvas SettingsUiCanvas => canvasProvider.GetCanvas(CanvasType.SettingsUiCanvas) as SettingsUiCanvas;
	private SettingsUiCanvasIntent SettingsUiCanvasIntent = new();
	private BottomUiCanvas BottomUiCanvas => canvasProvider.GetCanvas(CanvasType.BottomUiCanvas) as BottomUiCanvas;
	private BottomUiCanvasIntent BottomUiCanvasIntent = new();

	protected override HashSet<string> AllowedPaths => new() {
		"LobbyUiState",
	
};

	protected override void OnEnter() 
	{
        base.OnEnter();

        Subscribe();
        PrepareData();
		OnShow();
        SetIntent();
        ShowCanvases();
    }

    protected override void OnExit() {
        base.OnExit();

        UnSubscribe();
		OnHide();
        HideCanvases();
    }

	private void SetIntent() 
	{
		TopUiCanvas.SetData(TopUiCanvasIntent);
		SettingsUiCanvas.SetData(SettingsUiCanvasIntent);
		BottomUiCanvas.SetData(BottomUiCanvasIntent);
    }

	private void ShowCanvases() 
	{
		TopUiCanvas.Show();
		SettingsUiCanvas.Show();
		BottomUiCanvas.Show();
	}

	private void HideCanvases() 
	{
		TopUiCanvas.Hide();
		SettingsUiCanvas.Hide();
		BottomUiCanvas.Hide();
	}

	private void MoveToLobbyUiState() {
	    var cmd = commandFactory.Create(UiStateType.SettingsUiState, UiStateType.LobbyUiState);
	    cmd.ExecuteAsync();
	}
	


	[Inject]
    public void Inject(ChangeUiStateCommand.Factory factory,CanvasProvider provider) 
	{
        commandFactory = factory;
		canvasProvider = provider;
    }
} 
public partial class LoadingMatchUiState : BaseUiState
{
 	private CanvasProvider canvasProvider;
 	private ChangeUiStateCommand.Factory commandFactory;

	private BackgroundUiCanvas BackgroundUiCanvas => canvasProvider.GetCanvas(CanvasType.BackgroundUiCanvas) as BackgroundUiCanvas;
	private BackgroundUiCanvasIntent BackgroundUiCanvasIntent = new();
	private LoadingUiCanvas LoadingUiCanvas => canvasProvider.GetCanvas(CanvasType.LoadingUiCanvas) as LoadingUiCanvas;
	private LoadingUiCanvasIntent LoadingUiCanvasIntent = new();

	protected override HashSet<string> AllowedPaths => new() {
		"MatchUiState",
	
};

	protected override void OnEnter() 
	{
        base.OnEnter();

        Subscribe();
        PrepareData();
		OnShow();
        SetIntent();
        ShowCanvases();
    }

    protected override void OnExit() {
        base.OnExit();

        UnSubscribe();
		OnHide();
        HideCanvases();
    }

	private void SetIntent() 
	{
		BackgroundUiCanvas.SetData(BackgroundUiCanvasIntent);
		LoadingUiCanvas.SetData(LoadingUiCanvasIntent);
    }

	private void ShowCanvases() 
	{
		BackgroundUiCanvas.Show();
		LoadingUiCanvas.Show();
	}

	private void HideCanvases() 
	{
		BackgroundUiCanvas.Hide();
		LoadingUiCanvas.Hide();
	}

	private void MoveToMatchUiState() {
	    var cmd = commandFactory.Create(UiStateType.LoadingMatchUiState, UiStateType.MatchUiState);
	    cmd.ExecuteAsync();
	}
	


	[Inject]
    public void Inject(ChangeUiStateCommand.Factory factory,CanvasProvider provider) 
	{
        commandFactory = factory;
		canvasProvider = provider;
    }
} 
public partial class MatchUiState : BaseUiState
{
 	private CanvasProvider canvasProvider;
 	private ChangeUiStateCommand.Factory commandFactory;

	private TopUiCanvas TopUiCanvas => canvasProvider.GetCanvas(CanvasType.TopUiCanvas) as TopUiCanvas;
	private TopUiCanvasIntent TopUiCanvasIntent = new();
	private MatchUiCanvas MatchUiCanvas => canvasProvider.GetCanvas(CanvasType.MatchUiCanvas) as MatchUiCanvas;
	private MatchUiCanvasIntent MatchUiCanvasIntent = new();

	protected override HashSet<string> AllowedPaths => new() {
		"LoadingMetaUiState",
	
};

	protected override void OnEnter() 
	{
        base.OnEnter();

        Subscribe();
        PrepareData();
		OnShow();
        SetIntent();
        ShowCanvases();
    }

    protected override void OnExit() {
        base.OnExit();

        UnSubscribe();
		OnHide();
        HideCanvases();
    }

	private void SetIntent() 
	{
		TopUiCanvas.SetData(TopUiCanvasIntent);
		MatchUiCanvas.SetData(MatchUiCanvasIntent);
    }

	private void ShowCanvases() 
	{
		TopUiCanvas.Show();
		MatchUiCanvas.Show();
	}

	private void HideCanvases() 
	{
		TopUiCanvas.Hide();
		MatchUiCanvas.Hide();
	}

	private void MoveToLoadingMetaUiState() {
	    var cmd = commandFactory.Create(UiStateType.MatchUiState, UiStateType.LoadingMetaUiState);
	    cmd.ExecuteAsync();
	}
	


	[Inject]
    public void Inject(ChangeUiStateCommand.Factory factory,CanvasProvider provider) 
	{
        commandFactory = factory;
		canvasProvider = provider;
    }
} 
public partial class LoadingMetaUiState : BaseUiState
{
 	private CanvasProvider canvasProvider;
 	private ChangeUiStateCommand.Factory commandFactory;

	private BackgroundUiCanvas BackgroundUiCanvas => canvasProvider.GetCanvas(CanvasType.BackgroundUiCanvas) as BackgroundUiCanvas;
	private BackgroundUiCanvasIntent BackgroundUiCanvasIntent = new();
	private LoadingUiCanvas LoadingUiCanvas => canvasProvider.GetCanvas(CanvasType.LoadingUiCanvas) as LoadingUiCanvas;
	private LoadingUiCanvasIntent LoadingUiCanvasIntent = new();

	protected override HashSet<string> AllowedPaths => new() {
		"LobbyUiState",
	
};

	protected override void OnEnter() 
	{
        base.OnEnter();

        Subscribe();
        PrepareData();
		OnShow();
        SetIntent();
        ShowCanvases();
    }

    protected override void OnExit() {
        base.OnExit();

        UnSubscribe();
		OnHide();
        HideCanvases();
    }

	private void SetIntent() 
	{
		BackgroundUiCanvas.SetData(BackgroundUiCanvasIntent);
		LoadingUiCanvas.SetData(LoadingUiCanvasIntent);
    }

	private void ShowCanvases() 
	{
		BackgroundUiCanvas.Show();
		LoadingUiCanvas.Show();
	}

	private void HideCanvases() 
	{
		BackgroundUiCanvas.Hide();
		LoadingUiCanvas.Hide();
	}

	private void MoveToLobbyUiState() {
	    var cmd = commandFactory.Create(UiStateType.LoadingMetaUiState, UiStateType.LobbyUiState);
	    cmd.ExecuteAsync();
	}
	


	[Inject]
    public void Inject(ChangeUiStateCommand.Factory factory,CanvasProvider provider) 
	{
        commandFactory = factory;
		canvasProvider = provider;
    }
} 
public partial class ShopUiState : BaseUiState
{
 	private CanvasProvider canvasProvider;
 	private ChangeUiStateCommand.Factory commandFactory;

	private TopUiCanvas TopUiCanvas => canvasProvider.GetCanvas(CanvasType.TopUiCanvas) as TopUiCanvas;
	private TopUiCanvasIntent TopUiCanvasIntent = new();
	private ShopUiCanvas ShopUiCanvas => canvasProvider.GetCanvas(CanvasType.ShopUiCanvas) as ShopUiCanvas;
	private ShopUiCanvasIntent ShopUiCanvasIntent = new();
	private BottomUiCanvas BottomUiCanvas => canvasProvider.GetCanvas(CanvasType.BottomUiCanvas) as BottomUiCanvas;
	private BottomUiCanvasIntent BottomUiCanvasIntent = new();

	protected override HashSet<string> AllowedPaths => new() {
		"LobbyUiState",
	
};

	protected override void OnEnter() 
	{
        base.OnEnter();

        Subscribe();
        PrepareData();
		OnShow();
        SetIntent();
        ShowCanvases();
    }

    protected override void OnExit() {
        base.OnExit();

        UnSubscribe();
		OnHide();
        HideCanvases();
    }

	private void SetIntent() 
	{
		TopUiCanvas.SetData(TopUiCanvasIntent);
		ShopUiCanvas.SetData(ShopUiCanvasIntent);
		BottomUiCanvas.SetData(BottomUiCanvasIntent);
    }

	private void ShowCanvases() 
	{
		TopUiCanvas.Show();
		ShopUiCanvas.Show();
		BottomUiCanvas.Show();
	}

	private void HideCanvases() 
	{
		TopUiCanvas.Hide();
		ShopUiCanvas.Hide();
		BottomUiCanvas.Hide();
	}

	private void MoveToLobbyUiState() {
	    var cmd = commandFactory.Create(UiStateType.ShopUiState, UiStateType.LobbyUiState);
	    cmd.ExecuteAsync();
	}
	


	[Inject]
    public void Inject(ChangeUiStateCommand.Factory factory,CanvasProvider provider) 
	{
        commandFactory = factory;
		canvasProvider = provider;
    }
} 

}
