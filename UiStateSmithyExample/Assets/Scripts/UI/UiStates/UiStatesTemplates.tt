<#@ template debug="false" hostspecific="true" language="C#v3.5" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Security" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<# 
	var states = ParseStates(System.IO.File.ReadAllText(Host.ResolvePath("./UiStatesTemplates.dsl"), System.Text.Encoding.UTF8));
#>
//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated by a tool.
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ReSharper disable All
using System.Collections.Generic;
using Commands;
using GameSmithyState;
using UI.UiCanvases;
using UniDi;
using UnityEngine;

namespace UI.UiStates
{
public partial class UiStateProvider
{
	private readonly Dictionary<UiStateType, IState> states = new();
    private readonly DiContainer container;

	[Inject]
    public UiStateProvider(DiContainer container) {
        this.container = container;
        Debug.Log("UiStateProvider created");
        CreateStates();
    }

	private void CreateStates() 
	{
	<#
		for(var i  = 0; i < @states.Count; i++)
		{
	#>
	var <#=@states[i].Name#> = new <#=@states[i].Name#>();
	container.Inject(<#=@states[i].Name#>);
	states.Add(UiStateType.<#=@states[i].Name#>, <#=@states[i].Name#>);
	<#
		}
	#>
	}
}

public enum UiStateType 
{
	None,
<#
	for(var i  = 0; i < @states.Count; i++)
	{
#>
	<#=@states[i].Name#>,
<#
	}
#>
}

<#
	for(var i  = 0; i < @states.Count; i++)
	{
#>
public partial class <#=@states[i].Name#> : BaseUiState
{
 	private CanvasProvider canvasProvider;
 	private ChangeUiStateCommand.Factory commandFactory;

<#
		for(var j  = 0; j < @states[i].Canvases.Count; j++)
		{
#>
	private <#=@states[i].Canvases[j].Name#> <#=@states[i].Canvases[j].Name#> => canvasProvider.GetCanvas(CanvasType.<#=@states[i].Canvases[j].Name#>) as <#=@states[i].Canvases[j].Name#>;
	private <#=@states[i].Canvases[j].Name#>Intent <#=@states[i].Canvases[j].Name#>Intent = new();
<#		
		}
#>

	protected override HashSet<string> AllowedPaths => new() {
<#
		for(var j  = 0; j < @states[i].Routes.Count; j++)
		{
#>
		"<#=@states[i].Routes[j].Name#>",
<#		
		}
#>	
};

	protected override void OnEnter() 
	{
        base.OnEnter();

        Subscribe();
        PrepareData();
		OnShow();
        SetIntent();
        ShowCanvases();
    }

    protected override void OnExit() {
        base.OnExit();

        UnSubscribe();
		OnHide();
        HideCanvases();
    }

	private void SetIntent() 
	{
<#
for(var j  = 0; j < @states[i].Canvases.Count; j++)
{
#>
		<#=@states[i].Canvases[j].Name#>.SetData(<#=@states[i].Canvases[j].Name#>Intent);
<#		
		}
#>
    }

	private void ShowCanvases() 
	{
<#
for(var j  = 0; j < @states[i].Canvases.Count; j++)
{
#>
		<#=@states[i].Canvases[j].Name#>.Show();
<#		
		}
#>
	}

	private void HideCanvases() 
	{
<#
for(var j  = 0; j < @states[i].Canvases.Count; j++)
{
#>
		<#=@states[i].Canvases[j].Name#>.Hide();
<#		
		}
#>
	}

<#
		for(var j  = 0; j < @states[i].Routes.Count; j++)
		{
#>
	private void MoveTo<#=@states[i].Routes[j].Name#>() {
	    var cmd = commandFactory.Create(UiStateType.<#=@states[i].Name#>, UiStateType.<#=@states[i].Routes[j].Name#>);
	    cmd.ExecuteAsync();
	}
<#		
		}
#>	


	[Inject]
    public void Inject(ChangeUiStateCommand.Factory factory,CanvasProvider provider) 
	{
        commandFactory = factory;
		canvasProvider = provider;
    }
} 
<#
	}
#>

}
<#+ 
private List<StateDefinition> ParseStates(string stateDefinition)
{
	var states = new List<StateDefinition>();
	var lines = Array.ConvertAll(stateDefinition.Split(new[] {'\r', '\n'}, StringSplitOptions.RemoveEmptyEntries), l => l.Trim());
	
	foreach(var line in lines) {
		var partsLine = line.Split('#');

		var name = partsLine[0].Replace("state", "").Trim();

		var routesLine = partsLine[1].Replace("#routes", "").Replace("routes", "").Replace("(", "").Replace(")", "").Trim();
		var allRoutesAfterSplit = routesLine.Split(',');
		var allRoutes = new List<string>();

		for (var i = 0; i < allRoutesAfterSplit.Length; i++) {
			allRoutes.Add(allRoutesAfterSplit[i]);
		}

		var routes = new List<RouteFieldDefinition>();

		for (var i = 0; i < allRoutes.Count; i++) {
			if (string.IsNullOrEmpty(allRoutes[i]))
				continue;

			allRoutes[i] = allRoutes[i].Trim();
			routes.Add(new RouteFieldDefinition(allRoutes[i]));
		}
		
		var canvasesLine = partsLine[2].Replace("#canvases", "").Replace("canvases", "").Replace("(", "").Replace(")", "").Trim();
		var allCanvasesAfterSplit = canvasesLine.Split(',');
		var allCanvases = new List<string>();

		for (var i = 0; i < allCanvasesAfterSplit.Length; i++) {
			allCanvases.Add(allCanvasesAfterSplit[i]);
		}

		var canvases = new List<CanvasFieldDefinition>();

		for (var i = 0; i < allCanvases.Count; i++) {
			if (string.IsNullOrEmpty(allCanvases[i]))
				continue;

			allCanvases[i] = allCanvases[i].Trim();
			canvases.Add(new CanvasFieldDefinition(allCanvases[i]));
		}

		states.Add(new StateDefinition(name, routes,canvases));
	}

	return states;
}

private class StateDefinition
{
	public readonly string Name;
	public readonly List<RouteFieldDefinition> Routes;
	public readonly List<CanvasFieldDefinition> Canvases;
		
	public StateDefinition(string name, List<RouteFieldDefinition> routes, List<CanvasFieldDefinition> canvases)
	{
		this.Name = name;
		this.Routes = routes;
		this.Canvases = canvases;
	}
}

private class RouteFieldDefinition
{
	public readonly string Name;

	public RouteFieldDefinition(string name) 
	{
		this.Name = name;
	}
}

	private class CanvasFieldDefinition
	{
		public readonly string Name;

		public CanvasFieldDefinition(string name) 
		{
			this.Name = name;
		}
	}
#>