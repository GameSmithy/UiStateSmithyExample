<#@ template debug="false" hostspecific="true" language="C#v3.5" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Security" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Diagnostics" #>
<#
	var canvases = ParseCanvases(System.IO.File.ReadAllText(Host.ResolvePath("./CanvasesTemplates.dsl"), System.Text.Encoding.UTF8));
#>
//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated by a tool.
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;
using UI.UiCanvases;
using UniRx;
using UnityEngine;

namespace UI.UiCanvases
{
// ReSharper disable All
public partial class CanvasProvider
{
private readonly Dictionary<CanvasType, BaseUiCanvas> canvases = new();
        
public CanvasProvider() {
    Debug.Log("UiStateProvider created");
    CreateCanvases();
}

private void CreateCanvases() 
{
<#
	for (var i = 0; i < @canvases.Count; i++) 
	{
#>
	var <#= @canvases[i].Name #>Prefab = Resources.Load("<#= @canvases[i].Name #>");
	var <#= @canvases[i].Name #>Created = GameObject.Instantiate(<#= @canvases[i].Name #>Prefab) as GameObject;
	var <#= @canvases[i].Name #> = <#= @canvases[i].Name #>Created.GetComponent<<#= @canvases[i].Name #>>();

	<#= @canvases[i].Name #>.Hide();

    canvases.Add(CanvasType.<#= @canvases[i].Name #>, <#= @canvases[i].Name #>);

<#
	}
#>
}
}

public enum CanvasType 
{
<#
	for (var i = 0; i < @canvases.Count; i++) {
#>
	<#= @canvases[i].Name #>,
<#
	}
#>
}

<#
	for (var i = 0; i < @canvases.Count; i++) 
	{
#>
public partial class <#= @canvases[i].Name #> : BaseUiCanvas
{
	private <#= @canvases[i].Name #>Intent intent;
	public void SetData(<#= @canvases[i].Name #>Intent intent)
	{
		this.intent = intent;
	}
}
<#
	}
#>

<#
	for (var i = 0; i < @canvases.Count; i++) 
	{
#>
public partial class <#= @canvases[i].Name #>Intent
{
<#
		for (var y = 0; y < @canvases[i].Intents.Count; y++) 
		{
#>
    public <#= @canvases[i].Intents[y].Type #> <#= @canvases[i].Intents[y].Name #>;
<#
		}
#>
}
<#
	}
#>

}

<#+
	private List<CanvasDefinition> ParseCanvases(string canvasDefinition) {
		var canvases = new List<CanvasDefinition>();
		var lines = Array.ConvertAll(canvasDefinition.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries), l => l.Trim());

		foreach (var line in lines) {
			var partsLine = line.Split('#');
			if (partsLine.Length < 2)
				continue;

			var name = partsLine[0].Trim();

			var intentLine = partsLine[1].Replace("#intent", "").Replace("intent", "").Replace("(", "").Replace(")", "").TrimEnd().TrimStart();
			var allIntents = intentLine.Split(',');

			var intents = new List<IntentDefinition>();

			for (var i = 0; i < allIntents.Length; i++) {
				if (string.IsNullOrEmpty(allIntents[i]))
					continue;

				var intent = allIntents[i].Split(' ');
				if (intent.Length < 2)
					continue;

				var intentType = intent[0].Trim();
				var intentName = intent[1].Trim();

				intents.Add(new IntentDefinition(intentName, intentType));
			}

			canvases.Add(new CanvasDefinition(name, intents));
		}

		return canvases;
	}

	private class CanvasDefinition {
		public readonly string Name;
		public readonly List<IntentDefinition> Intents;

		public CanvasDefinition(string name, List<IntentDefinition> intents) {
			this.Name = name;
			this.Intents = intents;
		}
	}

	private class IntentDefinition {
		public readonly string Name;
		public readonly string Type;

		public IntentDefinition(string name, string type) {
			this.Name = name;
			this.Type = type;
		}
	}
	
#>
