//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated by a tool.
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ReSharper disable All
using System.Collections.Generic;
using GameSmithyState;
using UniDi;
using UnityEngine;
using Commands;

namespace GameStates
{
public partial class GameStatesProvider
{
    private readonly Dictionary<GameStateType, IState> states = new();
    private readonly DiContainer container;

    [Inject]
    public GameStatesProvider(DiContainer container) {
        this.container = container;
        Debug.Log("GameStatesProvider created");
        CreateStates();
    }
    
    private void CreateStates()
    {
		var InitGameState = new InitGameState();
 		container.Inject(InitGameState);
		states.Add(GameStateType.InitGameState, InitGameState);
		var LoadingGameState = new LoadingGameState();
 		container.Inject(LoadingGameState);
		states.Add(GameStateType.LoadingGameState, LoadingGameState);
		var MetaGameState = new MetaGameState();
 		container.Inject(MetaGameState);
		states.Add(GameStateType.MetaGameState, MetaGameState);
		var MatchGameState = new MatchGameState();
 		container.Inject(MatchGameState);
		states.Add(GameStateType.MatchGameState, MatchGameState);
    }
}

public enum GameStateType 
{
	None,
	InitGameState,
	LoadingGameState,
	MetaGameState,
	MatchGameState,
}

public partial class InitGameState : BaseState
{
 	private ChangeGameStateCommand.Factory commandFactory;
	protected override HashSet<string> AllowedPaths => new() {
		"LoadingGameState",
	
};

	private void MoveToLoadingGameState() {
	    var cmd = commandFactory.Create(GameStateType.InitGameState, GameStateType.LoadingGameState);
	    cmd.ExecuteAsync();
	}
	


	[Inject]
    public void Inject(ChangeGameStateCommand.Factory factory) {
        commandFactory = factory;
    }
} 
public partial class LoadingGameState : BaseState
{
 	private ChangeGameStateCommand.Factory commandFactory;
	protected override HashSet<string> AllowedPaths => new() {
		"MetaGameState",
		"MatchGameState",
	
};

	private void MoveToMetaGameState() {
	    var cmd = commandFactory.Create(GameStateType.LoadingGameState, GameStateType.MetaGameState);
	    cmd.ExecuteAsync();
	}
	private void MoveToMatchGameState() {
	    var cmd = commandFactory.Create(GameStateType.LoadingGameState, GameStateType.MatchGameState);
	    cmd.ExecuteAsync();
	}
	


	[Inject]
    public void Inject(ChangeGameStateCommand.Factory factory) {
        commandFactory = factory;
    }
} 
public partial class MetaGameState : BaseState
{
 	private ChangeGameStateCommand.Factory commandFactory;
	protected override HashSet<string> AllowedPaths => new() {
		"LoadingGameState",
	
};

	private void MoveToLoadingGameState() {
	    var cmd = commandFactory.Create(GameStateType.MetaGameState, GameStateType.LoadingGameState);
	    cmd.ExecuteAsync();
	}
	


	[Inject]
    public void Inject(ChangeGameStateCommand.Factory factory) {
        commandFactory = factory;
    }
} 
public partial class MatchGameState : BaseState
{
 	private ChangeGameStateCommand.Factory commandFactory;
	protected override HashSet<string> AllowedPaths => new() {
		"LoadingGameState",
	
};

	private void MoveToLoadingGameState() {
	    var cmd = commandFactory.Create(GameStateType.MatchGameState, GameStateType.LoadingGameState);
	    cmd.ExecuteAsync();
	}
	


	[Inject]
    public void Inject(ChangeGameStateCommand.Factory factory) {
        commandFactory = factory;
    }
} 

}
