<#@ template debug="false" hostspecific="true" language="C#v3.5" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Security" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<# 
	var states = ParseStates(System.IO.File.ReadAllText(Host.ResolvePath("./StatesTemplates.dsl"), System.Text.Encoding.UTF8));
#>
//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated by a tool.
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ReSharper disable All
using System.Collections.Generic;
using GameSmithyState;
using UniDi;
using UnityEngine;
using Commands;

namespace GameStates
{
public partial class GameStatesProvider
{
    private readonly Dictionary<GameStateType, IState> states = new();
    private readonly DiContainer container;

    [Inject]
    public GameStatesProvider(DiContainer container) {
        this.container = container;
        Debug.Log("GameStatesProvider created");
        CreateStates();
    }
    
    private void CreateStates()
    {
<#
	for(var i  = 0; i < @states.Count; i++)
	{
#>
		var <#=@states[i].Name#> = new <#=@states[i].Name#>();
 		container.Inject(<#=@states[i].Name#>);
		states.Add(GameStateType.<#=@states[i].Name#>, <#=@states[i].Name#>);
<#
	}
#>
    }
}

public enum GameStateType 
{
	None,
<#
	for(var i  = 0; i < @states.Count; i++)
	{
#>
	<#=@states[i].Name#>,
<#
	}
#>
}

<#
	for(var i  = 0; i < @states.Count; i++)
	{
#>
public partial class <#=@states[i].Name#> : BaseState
{
 	private ChangeGameStateCommand.Factory commandFactory;
	protected override HashSet<string> AllowedPaths => new() {
<#
		for(var j  = 0; j < @states[i].Routes.Count; j++)
		{
#>
		"<#=@states[i].Routes[j].Name#>",
<#		
		}
#>	
};

<#
		for(var j  = 0; j < @states[i].Routes.Count; j++)
		{
#>
	private void MoveTo<#=@states[i].Routes[j].Name#>() {
	    var cmd = commandFactory.Create(GameStateType.<#=@states[i].Name#>, GameStateType.<#=@states[i].Routes[j].Name#>);
	    cmd.ExecuteAsync();
	}
<#		
		}
#>	


	[Inject]
    public void Inject(ChangeGameStateCommand.Factory factory) {
        commandFactory = factory;
    }
} 
<#
	}
#>

}
<#+ 
private List<StateDefinition> ParseStates(string stateDefinition)
{
	var states = new List<StateDefinition>();
	var lines = Array.ConvertAll(stateDefinition.Split(new[] {'\r', '\n'}, StringSplitOptions.RemoveEmptyEntries), l => l.Trim());
	
	foreach(var line in lines) {
		var partsLine = line.Split('#');

		var name = partsLine[0].Replace("state", "").Trim();

		var routesLine = partsLine[1].Replace("#routes", "").Replace("routes", "").Replace("(", "").Replace(")", "").Trim();
		var allRoutesAfterSplit = routesLine.Split(',');
		var allRoutes = new List<string>();

		for (var i = 0; i < allRoutesAfterSplit.Length; i++) {
			allRoutes.Add(allRoutesAfterSplit[i]);
		}

		var routes = new List<RouteFieldDefinition>();

		for (var i = 0; i < allRoutes.Count; i++) {
			if (string.IsNullOrEmpty(allRoutes[i]))
				continue;

			allRoutes[i] = allRoutes[i].Trim();
			routes.Add(new RouteFieldDefinition(allRoutes[i]));
		}

		states.Add(new StateDefinition(name, routes));
	}

	return states;
}

private class StateDefinition
{
	public readonly string Name;
	public readonly List<RouteFieldDefinition> Routes;

	public StateDefinition(string name, List<RouteFieldDefinition> routes)
	{
		this.Name = name;
		this.Routes = routes;
	}
}

private class RouteFieldDefinition
{
	public readonly string Name;

	public RouteFieldDefinition(string name) 
	{
		this.Name = name;
	}
}
#>